name: Build

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: '*'

env:
  CACHE_EPOCH: 1

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Cache node modules
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: 'node_modules/'
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}
      - name: Cache yarn packages
        uses: actions/cache@v2
        id: cache-yarn-packages
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        with:
          path: '.yarn-packages'
          key: |
            ${{ env.CACHE_EPOCH }}-yarn-packages-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-packages-
      - name: Setup pip (pip)
        run: |
          pip install -U pip setuptools wheel
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-
      - name: Setup pip (dependecies)
        run: |
          pip install -r requirements-docs.txt
      - name: Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          doit setup:js
      - name: Build
        run: |
          doit build
      - name: Build checksum file
        run: |
          cd dist
          sha256sum * | tee SHA256SUMS
      - name: Upload (dist)
        uses: actions/upload-artifact@v2
        with:
          name: jupyterlite dist ${{ github.run_number }}
          path: ./dist
      - name: Lint
        run: |
          doit lint
      - name: Schema
        run: |
          doit schema
      - name: Test
        run: |
          doit test
      - name: Docs
        run: |
          doit docs
      - name: Check Built Artifacts
        run: |
          doit check
      - name: Upload Sphinx Logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: ignore
          path: |
            /tmp/sphinx-*.log

  release:
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: jupyterlite dist ${{ github.run_number }}
          path: ./dist
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
